// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tenant Model (Multi-tenant SaaS)
model Tenant {
  id            String      @id @default(uuid())
  name          String
  domain        String?     @unique
  subdomain     String?     @unique
  type          TenantType  @default(LAUNDRY_SERVICE) // Legacy app type
  businessTypeId String?    // New dynamic business type
  settings      Json?       // Tenant-specific settings
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  users                   User[]
  customers               Customer[]
  orders                  Order[]
  vehicles                Vehicle[]
  services                Service[]
  systemSettings          SystemSettings?
  systemBackups           SystemBackup[]
  businessType            BusinessType? @relation("TenantBusinessType", fields: [businessTypeId], references: [id])
  businessCustomization   BusinessCustomization?
  productCustomizations   BusinessProductCustomization[]
  serviceCustomizations   BusinessServiceCustomization[]

  @@map("tenants")
}

// User Model
model User {
  id          String   @id @default(uuid())
  tenantId    String
  email       String
  phone       String?
  password    String
  firstName   String
  lastName    String
  role        UserRole @default(EMPLOYEE)
  isActive    Boolean  @default(true)
  lastLoginAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant               Tenant                    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  orders               Order[]
  notifications        Notification[]
  notificationSettings UserNotificationSettings?
  systemBackups        SystemBackup[]

  @@unique([email, tenantId])
  @@map("users")
}

// Customer Model
model Customer {
  id          String   @id @default(uuid())
  tenantId    String
  name        String
  phone       String
  email       String?
  address     String
  district    String?
  city        String?
  postalCode  String?
  notes       String?
  balance     Decimal  @default(0.00) @db.Decimal(10, 2)
  totalOrders Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant      Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  orders      Order[]

  @@unique([phone, tenantId])
  @@map("customers")
}

// Order Model
model Order {
  id              String      @id @default(uuid())
  tenantId        String
  customerId      String
  userId          String?
  orderNumber     String      @unique
  status          OrderStatus @default(PENDING)
  items           OrderItem[]
  totalAmount     Decimal     @db.Decimal(10, 2)
  paidAmount      Decimal     @default(0.00) @db.Decimal(10, 2)
  notes           String?
  pickupDate      DateTime?
  deliveryDate    DateTime?
  vehicleId       String?
  routeOrder      Int?        // Order in delivery route
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  tenant          Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customer        Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  user            User?       @relation(fields: [userId], references: [id])
  vehicle         Vehicle?    @relation(fields: [vehicleId], references: [id])
  notifications   Notification[]

  @@map("orders")
}

// Order Items Model
model OrderItem {
  id          String  @id @default(uuid())
  orderId     String
  serviceId   String
  quantity    Int     @default(1)
  unitPrice   Decimal @db.Decimal(10, 2)
  totalPrice  Decimal @db.Decimal(10, 2)
  notes       String?

  // Relations
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  service     Service @relation(fields: [serviceId], references: [id])

  @@map("order_items")
}

// Services Model - Enhanced with template relationships
model Service {
  id                String           @id @default(uuid())
  tenantId          String
  name              String
  description       String?
  price             Decimal          @db.Decimal(10, 2)
  unit              String           @default("adet") // adet, m2, kg
  category          String?
  isActive          Boolean          @default(true)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  // Template relationships (optional)
  productTemplateId String?
  serviceTemplateId String?

  // Relations
  tenant            Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  orderItems        OrderItem[]
  productTemplate   ProductTemplate? @relation("ServiceProductTemplate", fields: [productTemplateId], references: [id])
  serviceTemplate   ServiceTemplate? @relation("ServiceServiceTemplate", fields: [serviceTemplateId], references: [id])

  @@map("services")
}

// Vehicle Model (Delivery vehicles)
model Vehicle {
  id          String   @id @default(uuid())
  tenantId    String
  name        String
  plate       String
  type        String   @default("VAN") // VAN, TRUCK, CAR
  capacity    Int?     // Number of orders it can carry
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  orders      Order[]

  @@unique([plate, tenantId])
  @@map("vehicles")
}

// Notification Model
model Notification {
  id          String            @id @default(uuid())
  tenantId    String?
  userId      String?
  orderId     String?
  title       String
  message     String
  type        NotificationType
  isRead      Boolean           @default(false)
  sentAt      DateTime?
  createdAt   DateTime          @default(now())

  // Relations
  user        User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  order       Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// User Notification Settings Model
model UserNotificationSettings {
  id                  String   @id @default(uuid())
  userId              String   @unique
  emailNotifications  Boolean  @default(true)
  smsNotifications    Boolean  @default(false)
  pushNotifications   Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_notification_settings")
}

// System Settings Model
model SystemSettings {
  id                 String   @id @default(uuid())
  tenantId           String   @unique
  systemName         String   @default("Halı Yıkama Sistemi")
  systemVersion      String   @default("1.0.0")
  maintenanceMode    Boolean  @default(false)
  debugMode          Boolean  @default(false)
  sessionTimeout     Int      @default(30)
  passwordMinLength  Int      @default(8)
  twoFactorAuth      Boolean  @default(false)
  autoBackup         Boolean  @default(true)
  backupFrequency    String   @default("daily") // daily, weekly, monthly
  backupRetention    Int      @default(30)
  apiRateLimit       Int      @default(1000)
  apiTimeout         Int      @default(30)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  tenant             Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("system_settings")
}

// System Backup Model
model SystemBackup {
  id           String      @id @default(uuid())
  tenantId     String
  userId       String
  backupType   BackupType  @default(MANUAL)
  status       BackupStatus @default(PENDING)
  fileName     String
  backupSize   BigInt?
  errorMessage String?
  createdAt    DateTime    @default(now())
  completedAt  DateTime?

  // Relations
  tenant       Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user         User        @relation(fields: [userId], references: [id])

  @@map("system_backups")
}

// Enums
enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  EMPLOYEE
}

enum OrderStatus {
  PENDING       // Beklemede
  PICKED_UP     // Teslim Alındı
  WASHING       // Yıkamada
  READY         // Hazır
  DELIVERED     // Teslim Edildi
  CANCELLED     // İptal
}

enum TenantType {
  LAUNDRY_SERVICE   // Halı yıkamacısı
  RESTAURANT        // Restoran yönetimi
  HOTEL             // Otel yönetimi
  RETAIL            // Perakende satış
  WORKSHOP          // Atölye/tamirci
  HEALTHCARE        // Sağlık hizmetleri
}

// Dynamic Business Types - Configurable by Admin
model BusinessType {
  id                String   @id @default(uuid())
  name              String   @unique
  displayName       String   // Turkish display name
  description       String?
  icon              String?  // Icon name for mobile
  color             String?  // Theme color for this business type
  isActive          Boolean  @default(true)
  sortOrder         Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  productTemplates  ProductTemplate[]
  serviceTemplates  ServiceTemplate[]
  pricingRules      PricingRule[]
  tenants           Tenant[] @relation("TenantBusinessType")
  
  @@map("business_types")
}

// Product Templates for each Business Type
model ProductTemplate {
  id              String      @id @default(uuid())
  businessTypeId  String
  name            String
  description     String?
  basePrice       Decimal     @db.Decimal(10, 2)
  unit            String      @default("adet") // adet, m2, kg, metre, litre
  category        String?
  isActive        Boolean     @default(true)
  isRequired      Boolean     @default(false) // Required for this business type
  sortOrder       Int         @default(0)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Additional fields for different business types
  attributes      Json?       // Flexible attributes (size, color, material, etc.)
  
  // Relations
  businessType    BusinessType @relation(fields: [businessTypeId], references: [id], onDelete: Cascade)
  services        Service[]    @relation("ServiceProductTemplate")
  customizations  BusinessProductCustomization[]
  
  @@map("product_templates")
}

// Service Templates for each Business Type
model ServiceTemplate {
  id              String      @id @default(uuid())
  businessTypeId  String
  name            String
  description     String?
  basePrice       Decimal     @db.Decimal(10, 2)
  duration        Int?        // Duration in minutes
  category        String?
  isActive        Boolean     @default(true)
  isRequired      Boolean     @default(false)
  sortOrder       Int         @default(0)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Additional service properties
  requirements    Json?       // Special requirements (equipment, skills, etc.)
  
  // Relations
  businessType    BusinessType @relation(fields: [businessTypeId], references: [id], onDelete: Cascade)
  services        Service[]    @relation("ServiceServiceTemplate")
  customizations  BusinessServiceCustomization[]
  
  @@map("service_templates")
}

// Flexible Pricing Rules
model PricingRule {
  id              String      @id @default(uuid())
  businessTypeId  String
  name            String
  description     String?
  ruleType        PricingRuleType
  conditions      Json        // Conditions for when this rule applies
  calculation     Json        // How to calculate the price
  isActive        Boolean     @default(true)
  priority        Int         @default(0) // Higher priority rules override lower
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  businessType    BusinessType @relation(fields: [businessTypeId], references: [id], onDelete: Cascade)
  
  @@map("pricing_rules")
}

// Business Customizations - Tenant-specific configurations
model BusinessCustomization {
  id          String   @id @default(uuid())
  tenantId    String   @unique
  settings    Json     // Custom business settings
  theme       Json?    // Custom theme colors, logos
  features    Json?    // Enabled/disabled features
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@map("business_customizations")
}

// Tenant's custom products based on templates
model BusinessProductCustomization {
  id                String          @id @default(uuid())
  tenantId          String
  productTemplateId String
  customName        String?         // Custom name override
  customPrice       Decimal?        @db.Decimal(10, 2) // Custom price override
  customAttributes  Json?           // Custom attributes
  isActive          Boolean         @default(true)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  // Relations
  tenant            Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  productTemplate   ProductTemplate @relation(fields: [productTemplateId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, productTemplateId])
  @@map("business_product_customizations")
}

// Tenant's custom services based on templates
model BusinessServiceCustomization {
  id                String          @id @default(uuid())
  tenantId          String
  serviceTemplateId String
  customName        String?         // Custom name override
  customPrice       Decimal?        @db.Decimal(10, 2) // Custom price override
  customDuration    Int?            // Custom duration override
  customRequirements Json?          // Custom requirements
  isActive          Boolean         @default(true)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  // Relations
  tenant            Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  serviceTemplate   ServiceTemplate @relation(fields: [serviceTemplateId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, serviceTemplateId])
  @@map("business_service_customizations")
}

enum PricingRuleType {
  VOLUME_DISCOUNT     // Volume-based discounts
  TIME_BASED         // Time-based pricing (rush orders, etc.)
  CUSTOMER_TIER      // Customer tier-based pricing
  PRODUCT_COMBO      // Product combination discounts
  SEASONAL           // Seasonal pricing adjustments
  CUSTOM_FORMULA     // Custom calculation formula
}

enum NotificationType {
  ORDER_CREATED
  ORDER_UPDATED
  ORDER_READY
  ORDER_DELIVERED
  PAYMENT_RECEIVED
  SYSTEM
  SMS
  WHATSAPP
}

enum BackupType {
  MANUAL
  AUTOMATIC
  SCHEDULED
}

enum BackupStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}