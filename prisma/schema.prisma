generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id                    String                         @id @default(uuid())
  name                  String
  domain                String?                        @unique
  subdomain             String?                        @unique
  settings              Json?
  isActive              Boolean                        @default(true)
  createdAt             DateTime                       @default(now())
  updatedAt             DateTime                       @updatedAt
  type                  TenantType                     @default(LAUNDRY_SERVICE)
  businessCustomization BusinessCustomization?
  productCustomizations BusinessProductCustomization[]
  serviceCustomizations BusinessServiceCustomization[]
  customers             Customer[]
  orders                Order[]
  services              Service[]
  systemBackups         SystemBackup[]
  systemSettings        SystemSettings?
  tenantBusinessTypes   TenantBusinessType[]
  users                 User[]
  vehicles              Vehicle[]

  @@map("tenants")
}

model TenantBusinessType {
  id             String      @id @default(uuid())
  tenantId       String
  businessTypeId String
  isPrimary      Boolean     @default(false)
  isActive       Boolean     @default(true)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  businessType   BusinessType @relation(fields: [businessTypeId], references: [id], onDelete: Cascade)
  tenant         Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, businessTypeId])
  @@map("tenant_business_types")
}

model User {
  id                   String                    @id @default(uuid())
  tenantId             String
  email                String
  phone                String?
  password             String
  firstName            String
  lastName             String
  role                 UserRole                  @default(EMPLOYEE)
  isActive             Boolean                   @default(true)
  lastLoginAt          DateTime?
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  notifications        Notification[]
  orders               Order[]
  systemBackups        SystemBackup[]
  notificationSettings UserNotificationSettings?
  tenant               Tenant                    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([email, tenantId])
  @@map("users")
}

model Customer {
  id          String   @id @default(uuid())
  tenantId    String
  name        String
  phone       String
  email       String?
  address     String
  district    String?
  city        String?
  postalCode  String?
  notes       String?
  balance     Decimal  @default(0.00) @db.Decimal(10, 2)
  totalOrders Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  orders      Order[]

  @@unique([phone, tenantId])
  @@map("customers")
}

model Order {
  id            String         @id @default(uuid())
  tenantId      String
  customerId    String
  userId        String?
  orderNumber   String         @unique
  status        OrderStatus    @default(PENDING)
  totalAmount   Decimal        @db.Decimal(10, 2)
  paidAmount    Decimal        @default(0.00) @db.Decimal(10, 2)
  notes         String?
  pickupDate    DateTime?
  deliveryDate  DateTime?
  vehicleId     String?
  routeOrder    Int?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[]
  items         OrderItem[]
  customer      Customer       @relation(fields: [customerId], references: [id], onDelete: Cascade)
  tenant        Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user          User?          @relation(fields: [userId], references: [id])
  vehicle       Vehicle?       @relation(fields: [vehicleId], references: [id])

  @@map("orders")
}

model OrderItem {
  id         String  @id @default(uuid())
  orderId    String
  serviceId  String
  quantity   Int     @default(1)
  unitPrice  Decimal @db.Decimal(10, 2)
  totalPrice Decimal @db.Decimal(10, 2)
  notes      String?
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  service    Service @relation(fields: [serviceId], references: [id])

  @@map("order_items")
}

model Service {
  id                String           @id @default(uuid())
  tenantId          String
  name              String
  description       String?
  price             Decimal          @db.Decimal(10, 2)
  unit              String           @default("adet")
  category          String?
  isActive          Boolean          @default(true)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  productTemplateId String?
  serviceTemplateId String?
  orderItems        OrderItem[]
  productTemplate   ProductTemplate? @relation("ServiceProductTemplate", fields: [productTemplateId], references: [id])
  serviceTemplate   ServiceTemplate? @relation("ServiceServiceTemplate", fields: [serviceTemplateId], references: [id])
  tenant            Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("services")
}

model Vehicle {
  id        String   @id @default(uuid())
  tenantId  String
  name      String
  plate     String
  type      String   @default("VAN")
  capacity  Int?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([plate, tenantId])
  @@map("vehicles")
}

model Notification {
  id        String           @id @default(uuid())
  tenantId  String?
  userId    String?
  orderId   String?
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  sentAt    DateTime?
  createdAt DateTime         @default(now())
  order     Order?           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user      User?            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model UserNotificationSettings {
  id                 String   @id @default(uuid())
  userId             String   @unique
  emailNotifications Boolean  @default(true)
  smsNotifications   Boolean  @default(false)
  pushNotifications  Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_notification_settings")
}

model SystemSettings {
  id                String   @id @default(uuid())
  tenantId          String   @unique
  systemName        String   @default("Halı Yıkama Sistemi")
  systemVersion     String   @default("1.0.0")
  maintenanceMode   Boolean  @default(false)
  debugMode         Boolean  @default(false)
  sessionTimeout    Int      @default(30)
  passwordMinLength Int      @default(8)
  twoFactorAuth     Boolean  @default(false)
  autoBackup        Boolean  @default(true)
  backupFrequency   String   @default("daily")
  backupRetention   Int      @default(30)
  apiRateLimit      Int      @default(1000)
  apiTimeout        Int      @default(30)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("system_settings")
}

model SystemBackup {
  id           String       @id @default(uuid())
  tenantId     String
  userId       String
  backupType   BackupType   @default(MANUAL)
  status       BackupStatus @default(PENDING)
  fileName     String
  backupSize   BigInt?
  errorMessage String?
  createdAt    DateTime     @default(now())
  completedAt  DateTime?
  tenant       Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id])

  @@map("system_backups")
}

model BusinessType {
  id                  String                @id @default(uuid())
  name                String                @unique
  displayName         String
  description         String?
  icon                String?
  color               String?
  isActive            Boolean               @default(true)
  sortOrder           Int                   @default(0)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  pricingRules        PricingRule[]
  productTemplates    ProductTemplate[]
  serviceTemplates    ServiceTemplate[]
  tenantBusinessTypes TenantBusinessType[]

  @@map("business_types")
}

model ProductTemplate {
  id             String                         @id @default(uuid())
  businessTypeId String
  name           String
  description    String?
  basePrice      Decimal                        @db.Decimal(10, 2)
  unit           String                         @default("adet")
  category       String?
  isActive       Boolean                        @default(true)
  isRequired     Boolean                        @default(false)
  sortOrder      Int                            @default(0)
  createdAt      DateTime                       @default(now())
  updatedAt      DateTime                       @updatedAt
  attributes     Json?
  customizations BusinessProductCustomization[]
  businessType   BusinessType                   @relation(fields: [businessTypeId], references: [id], onDelete: Cascade)
  services       Service[]                      @relation("ServiceProductTemplate")

  @@map("product_templates")
}

model ServiceTemplate {
  id             String                         @id @default(uuid())
  businessTypeId String
  name           String
  description    String?
  basePrice      Decimal                        @db.Decimal(10, 2)
  duration       Int?
  category       String?
  isActive       Boolean                        @default(true)
  isRequired     Boolean                        @default(false)
  sortOrder      Int                            @default(0)
  createdAt      DateTime                       @default(now())
  updatedAt      DateTime                       @updatedAt
  requirements   Json?
  customizations BusinessServiceCustomization[]
  businessType   BusinessType                   @relation(fields: [businessTypeId], references: [id], onDelete: Cascade)
  services       Service[]                      @relation("ServiceServiceTemplate")

  @@map("service_templates")
}

model PricingRule {
  id             String          @id @default(uuid())
  businessTypeId String
  name           String
  description    String?
  ruleType       PricingRuleType
  conditions     Json
  calculation    Json
  isActive       Boolean         @default(true)
  priority       Int             @default(0)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  businessType   BusinessType    @relation(fields: [businessTypeId], references: [id], onDelete: Cascade)

  @@map("pricing_rules")
}

model BusinessCustomization {
  id        String   @id @default(uuid())
  tenantId  String   @unique
  settings  Json
  theme     Json?
  features  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("business_customizations")
}

model BusinessProductCustomization {
  id                String          @id @default(uuid())
  tenantId          String
  productTemplateId String
  customName        String?
  customPrice       Decimal?        @db.Decimal(10, 2)
  customAttributes  Json?
  isActive          Boolean         @default(true)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  productTemplate   ProductTemplate @relation(fields: [productTemplateId], references: [id], onDelete: Cascade)
  tenant            Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, productTemplateId])
  @@map("business_product_customizations")
}

model BusinessServiceCustomization {
  id                 String          @id @default(uuid())
  tenantId           String
  serviceTemplateId  String
  customName         String?
  customPrice        Decimal?        @db.Decimal(10, 2)
  customDuration     Int?
  customRequirements Json?
  isActive           Boolean         @default(true)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  serviceTemplate    ServiceTemplate @relation(fields: [serviceTemplateId], references: [id], onDelete: Cascade)
  tenant             Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, serviceTemplateId])
  @@map("business_service_customizations")
}

enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
  SUPER_ADMIN
  BUSINESS_OWNER
}

enum OrderStatus {
  PENDING
  PICKED_UP
  WASHING
  READY
  DELIVERED
  CANCELLED
}

enum TenantType {
  LAUNDRY_SERVICE
  RESTAURANT
  HOTEL
  RETAIL
  WORKSHOP
  HEALTHCARE
}

enum PricingRuleType {
  VOLUME_DISCOUNT
  TIME_BASED
  CUSTOMER_TIER
  PRODUCT_COMBO
  SEASONAL
  CUSTOM_FORMULA
}

enum NotificationType {
  ORDER_CREATED
  ORDER_UPDATED
  ORDER_READY
  ORDER_DELIVERED
  PAYMENT_RECEIVED
  SYSTEM
  SMS
  WHATSAPP
}

enum BackupType {
  MANUAL
  AUTOMATIC
  SCHEDULED
}

enum BackupStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}
