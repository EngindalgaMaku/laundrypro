// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tenant Model (Multi-tenant SaaS)
model Tenant {
  id          String     @id @default(uuid())
  name        String
  domain      String?    @unique
  subdomain   String?    @unique
  type        TenantType @default(LAUNDRY_SERVICE) // App type
  settings    Json?      // Tenant-specific settings
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  users       User[]
  customers   Customer[]
  orders      Order[]
  vehicles    Vehicle[]
  services    Service[]

  @@map("tenants")
}

// User Model
model User {
  id          String   @id @default(uuid())
  tenantId    String
  email       String
  phone       String?
  password    String
  firstName   String
  lastName    String
  role        UserRole @default(EMPLOYEE)
  isActive    Boolean  @default(true)
  lastLoginAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  orders      Order[]
  notifications Notification[]

  @@unique([email, tenantId])
  @@map("users")
}

// Customer Model
model Customer {
  id          String   @id @default(uuid())
  tenantId    String
  name        String
  phone       String
  email       String?
  address     String
  district    String?
  city        String?
  postalCode  String?
  notes       String?
  balance     Decimal  @default(0.00) @db.Decimal(10, 2)
  totalOrders Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant      Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  orders      Order[]

  @@unique([phone, tenantId])
  @@map("customers")
}

// Order Model
model Order {
  id              String      @id @default(uuid())
  tenantId        String
  customerId      String
  userId          String?
  orderNumber     String      @unique
  status          OrderStatus @default(PENDING)
  items           OrderItem[]
  totalAmount     Decimal     @db.Decimal(10, 2)
  paidAmount      Decimal     @default(0.00) @db.Decimal(10, 2)
  notes           String?
  pickupDate      DateTime?
  deliveryDate    DateTime?
  vehicleId       String?
  routeOrder      Int?        // Order in delivery route
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  tenant          Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customer        Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  user            User?       @relation(fields: [userId], references: [id])
  vehicle         Vehicle?    @relation(fields: [vehicleId], references: [id])
  notifications   Notification[]

  @@map("orders")
}

// Order Items Model
model OrderItem {
  id          String  @id @default(uuid())
  orderId     String
  serviceId   String
  quantity    Int     @default(1)
  unitPrice   Decimal @db.Decimal(10, 2)
  totalPrice  Decimal @db.Decimal(10, 2)
  notes       String?

  // Relations
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  service     Service @relation(fields: [serviceId], references: [id])

  @@map("order_items")
}

// Services Model (Halı yıkama hizmetleri)
model Service {
  id          String      @id @default(uuid())
  tenantId    String
  name        String
  description String?
  price       Decimal     @db.Decimal(10, 2)
  unit        String      @default("adet") // adet, m2, kg
  category    String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  tenant      Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]

  @@map("services")
}

// Vehicle Model (Delivery vehicles)
model Vehicle {
  id          String   @id @default(uuid())
  tenantId    String
  name        String
  plate       String
  type        String   @default("VAN") // VAN, TRUCK, CAR
  capacity    Int?     // Number of orders it can carry
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  orders      Order[]

  @@unique([plate, tenantId])
  @@map("vehicles")
}

// Notification Model
model Notification {
  id          String            @id @default(uuid())
  tenantId    String?
  userId      String?
  orderId     String?
  title       String
  message     String
  type        NotificationType
  isRead      Boolean           @default(false)
  sentAt      DateTime?
  createdAt   DateTime          @default(now())

  // Relations
  user        User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  order       Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Enums
enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  EMPLOYEE
}

enum OrderStatus {
  PENDING       // Beklemede
  PICKED_UP     // Teslim Alındı
  WASHING       // Yıkamada
  READY         // Hazır
  DELIVERED     // Teslim Edildi
  CANCELLED     // İptal
}

enum TenantType {
  LAUNDRY_SERVICE   // Halı yıkamacısı
  RESTAURANT        // Restoran yönetimi
  HOTEL             // Otel yönetimi
  RETAIL            // Perakende satış
  WORKSHOP          // Atölye/tamirci
  HEALTHCARE        // Sağlık hizmetleri
}

enum NotificationType {
  ORDER_CREATED
  ORDER_UPDATED
  ORDER_READY
  ORDER_DELIVERED
  PAYMENT_RECEIVED
  SYSTEM
  SMS
  WHATSAPP
}